// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let cart = [];
let currentOrder = null;
let orders = [];
let referrals = [];
let userDiscount = 0;
let isReferralUser = false;

// Slot Machine System
const slotPrizes = [
    { type: 'discount', value: 5, text: '5% –°–ö–ò–î–ö–ê', chance: 25 },
    { type: 'discount', value: 3, text: '3% –°–ö–ò–î–ö–ê', chance: 35 },
    { type: 'discount', value: 1, text: '1% –°–ö–ò–î–ö–ê', chance: 30 },
    { type: 'spin', value: 1, text: '–î–û–ü. –°–ü–ò–ù', chance: 8 },
    { type: 'nothing', value: 0, text: '–ü–û–í–ï–ó–ï–¢ –í –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ó', chance: 2 }
];

let userSpins = 1;
let currentDiscount = 0;
let userInvitations = [];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_CONFIG = {
    token: '8490335749:AAEKfRAaNKbnGNuEIN2M4rNVGb_BwH07nXk',
    adminChatId: '922569313',
    managerUsername: '@minishishaaa'
};

// –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
const products = [
    {
        id: 'shaft',
        name: '–®–∞—Ö—Ç–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞',
        price: 2000,
        description: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —à–∞—Ö—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∑–∞—â–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π. –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å.',
        image: 'images/black.jpg',
        fallbackIcon: 'üî©',
        colors: ['‚ö´Ô∏è –ß–µ—Ä–Ω—ã–π', 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π', '‚ö™Ô∏è –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π'],
        specs: {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª': 'ABS –ø–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
            '–í—ã—Å–æ—Ç–∞': '24 —Å–º',
            '–î–∏–∞–º–µ—Ç—Ä': '6.7 —Å–º',
            '–í–µ—Å': '300 –≥'
        }
    },
    {
        id: 'bowl',
        name: '–ö–æ–ª–±–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞', 
        price: 1000,
        description: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–æ–ª–±–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∑—å–±–∞ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.',
        image: 'images/kolb.jpg',
        fallbackIcon: 'üîÆ',
        specs: {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª': 'ABS –ø–ª–∞—Å—Ç–∏–∫',
            '–í—ã—Å–æ—Ç–∞': '7.5 —Å–º'
        }
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    loadFromStorage();
    setupEventListeners();
    initSlotMachine();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        Telegram.WebApp.setHeaderColor('#2c5530');
        Telegram.WebApp.setBackgroundColor('#0f172a');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (isAgeConfirmed()) {
        showMainApp();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    handleReferralParams();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    loadProducts();
    updateCartUI();
}

// Slot Machine Functions
function initSlotMachine() {
    if (!localStorage.getItem('minishisha_slotShown')) {
        setTimeout(showSlotMachine, 1500);
        localStorage.setItem('minishisha_slotShown', 'true');
    }
    loadInvitationsFromStorage();
}

function loadInvitationsFromStorage() {
    const saved = localStorage.getItem('minishisha_invitations');
    if (saved) userInvitations = JSON.parse(saved);
}

function saveInvitationsToStorage() {
    localStorage.setItem('minishisha_invitations', JSON.stringify(userInvitations));
}

function canInviteMore() {
    const today = new Date().toDateString();
    const todayInvites = userInvitations.filter(inv => 
        new Date(inv.date).toDateString() === today
    ).length;
    
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const weekInvites = userInvitations.filter(inv => 
        new Date(inv.date) > weekAgo
    ).length;
    
    const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    const monthInvites = userInvitations.filter(inv => 
        new Date(inv.date) > monthAgo
    ).length;
    
    return {
        canInvite: todayInvites < 2 && weekInvites < 5 && monthInvites < 15,
        today: todayInvites,
        todayLeft: 2 - todayInvites,
        week: weekInvites,
        weekLeft: 5 - weekInvites,
        month: monthInvites,
        monthLeft: 15 - monthInvites
    };
}

function addInvitation(friendId) {
    const inviteCheck = canInviteMore();
    
    if (!inviteCheck.canInvite) {
        return { success: false, reason: 'limit_reached' };
    }
    
    const alreadyInvited = userInvitations.some(inv => inv.friendId === friendId);
    if (alreadyInvited) {
        return { success: false, reason: 'already_invited' };
    }
    
    userInvitations.push({
        friendId,
        date: new Date().toISOString()
    });
    
    userSpins += 2;
    updateSpinsDisplay();
    saveInvitationsToStorage();
    
    return { success: true, spins: 2, limits: inviteCheck };
}

function updateSpinsDisplay() {
    const spinCount = document.getElementById('spinCount');
    if (spinCount) spinCount.textContent = userSpins;
    
    const spinBtn = document.getElementById('spinButton');
    if (spinBtn) {
        spinBtn.disabled = userSpins <= 0;
        spinBtn.textContent = userSpins > 0 ? 
            `üéØ –ö–†–£–¢–ò–¢–¨ (${userSpins})` : '‚ùå –ù–ï–¢ –°–ü–ò–ù–û–í';
    }
}

function showSlotMachine() {
    document.getElementById('slotPopup').classList.remove('hidden');
    updateSpinsDisplay();
    updateLimitsDisplay();
}

function closeSlotMachine() {
    document.getElementById('slotPopup').classList.add('hidden');
}

function updateLimitsDisplay() {
    const limits = canInviteMore();
    const limitsElement = document.getElementById('inviteLimits');
    if (limitsElement) {
        limitsElement.innerHTML = `
            <div>üìÖ –°–µ–≥–æ–¥–Ω—è: ${limits.today}/2</div>
            <div>üìÖ –ù–µ–¥–µ–ª—è: ${limits.week}/5</div>
            <div>üìÖ –ú–µ—Å—è—Ü: ${limits.month}/15</div>
        `;
    }
}

function spinSlotMachine() {
    if (userSpins <= 0) {
        showNotification('‚ùå –ù–µ—Ç —Å–ø–∏–Ω–æ–≤! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑');
        return;
    }
    
    userSpins--;
    updateSpinsDisplay();
    
    const reels = document.querySelectorAll('.reel');
    reels.forEach(reel => {
        reel.style.animation = 'spin 0.5s ease-in-out';
    });
    
    setTimeout(() => {
        const prize = getRandomPrize();
        showPrizeResult(prize);
        
        reels.forEach(reel => {
            reel.style.animation = '';
        });
    }, 1500);
}

function getRandomPrize() {
    const random = Math.random() * 100;
    let accumulatedChance = 0;
    
    for (const prize of slotPrizes) {
        accumulatedChance += prize.chance;
        if (random <= accumulatedChance) {
            return prize;
        }
    }
    return slotPrizes[0];
}

function showPrizeResult(prize) {
    if (prize.type === 'discount') {
        currentDiscount = prize.value;
        showNotification(`üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${prize.value}% —Å–∫–∏–¥–∫—É!`);
        applyDiscount(prize.value);
    } else if (prize.type === 'spin') {
        userSpins += prize.value;
        updateSpinsDisplay();
        showNotification(`üéÅ +${prize.value} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω!`);
    } else {
        showNotification('üòî –ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!');
    }
}

function applyDiscount(discount) {
    userDiscount = discount;
    isReferralUser = true;
    saveToStorage();
    
    const discountElement = document.getElementById('currentDiscount');
    if (discountElement) {
        discountElement.textContent = `${discount}%`;
        discountElement.style.display = 'block';
    }
}

function shareForSpin() {
    userSpins += 1;
    updateSpinsDisplay();
    showNotification('üì§ –ü–æ–¥–µ–ª–∏–ª–∏—Å—å! +1 —Å–ø–∏–Ω');
}

function inviteFriend() {
    const friendId = 'friend_' + Date.now();
    const result = addInvitation(friendId);
    
    if (result.success) {
        showNotification(`üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–≥–∞! +2 —Å–ø–∏–Ω–∞`);
        updateLimitsDisplay();
    } else {
        showNotification('‚ùå –õ–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω');
    }
}

function orderForSpins() {
    userSpins += 2;
    updateSpinsDisplay();
    showNotification('üõí –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! +2 —Å–ø–∏–Ω–∞');
    closeSlotMachine();
    showScreen('catalog');
}

// –†–∞–±–æ—Ç–∞ —Å localStorage
function saveToStorage() {
    localStorage.setItem('minishisha_cart', JSON.stringify(cart));
    localStorage.setItem('minishisha_orders', JSON.stringify(orders));
    localStorage.setItem('minishisha_referrals', JSON.stringify(referrals));
    localStorage.setItem('minishisha_userDiscount', userDiscount.toString());
    localStorage.setItem('minishisha_isReferralUser', isReferralUser.toString());
}

function loadFromStorage() {
    try {
        cart = JSON.parse(localStorage.getItem('minishisha_cart') || '[]');
        orders = JSON.parse(localStorage.getItem('minishisha_orders') || '[]');
        referrals = JSON.parse(localStorage.getItem('minishisha_referrals') || '[]');
        userDiscount = parseInt(localStorage.getItem('minishisha_userDiscount') || '0');
        isReferralUser = localStorage.getItem('minishisha_isReferralUser') === 'true';
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        cart = [];
        orders = [];
        referrals = [];
        userDiscount = 0;
        isReferralUser = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function isAgeConfirmed() {
    return localStorage.getItem('minishisha_ageConfirmed') === 'true';
}

function confirmAge() {
    localStorage.setItem('minishisha_ageConfirmed', 'true');
    showMainApp();
    showNotification('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MiniShisha!');
}

function rejectAge() {
    showNotification('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç');
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        setTimeout(() => Telegram.WebApp.close(), 2000);
    }
}

function showMainApp() {
    document.getElementById('ageWarning').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenId) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
    
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    const navButton = document.querySelector(`.nav-item[data-screen="${screenId}"]`);
    if (navButton) {
        navButton.classList.add('active');
    }
    
    switch(screenId) {
        case 'cart':
            updateCartUI();
            break;
        case 'orders':
            loadOrdersUI();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function loadProducts() {
    const productsList = document.getElementById('productsList');
    if (!productsList) return;
    
    productsList.innerHTML = '';

    products.forEach((product, index) => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        
        const badge = index === 0 ? '<div class="product-badge">üî• –•–∏—Ç –ø—Ä–æ–¥–∞–∂</div>' : '';
        
        const specsHTML = product.specs ? `
            <div class="product-specs">
                <div class="specs-grid">
                    ${Object.entries(product.specs).map(([key, value]) => `
                        <div class="spec-item">
                            <span>${key}:</span>
                            <span class="spec-value">${value}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : '';
        
        const colorsHTML = product.colors ? `
            <div class="product-colors">
                ${product.colors.map(color => `
                    <span class="color-tag">${color}</span>
                `).join('')}
            </div>
        ` : '';

        productCard.innerHTML = `
            ${badge}
            <div class="product-header">
                <img src="${product.image}" alt="${product.name}" class="product-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='block'">
                <span class="product-icon" style="display: none;">${product.fallbackIcon}</span>
                <h3>${product.name}</h3>
            </div>
            <p class="product-description">${product.description}</p>
            ${specsHTML}
            ${colorsHTML}
            <div class="product-footer">
                <div class="product-price">${product.price}‚ÇΩ</div>
                <button class="btn-add-to-cart" onclick="addToCart('${product.id}')">
                    <span class="btn-icon">‚ûï</span>
                    –í –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `;
        productsList.appendChild(productCard);
    });
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (!product) return;

    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            ...product,
            quantity: 1,
            addedAt: new Date().toISOString()
        });
    }
    
    updateCartUI();
    showNotification(`‚úÖ "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
    showScreen('cart');
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartUI();
    showNotification('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

function updateCartQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCartUI();
        }
    }
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
function calculateTotalPrice() {
    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    if (isReferralUser && userDiscount > 0) {
        const discountAmount = Math.round((subtotal * userDiscount) / 100);
        return {
            subtotal: subtotal,
            discount: discountAmount,
            total: subtotal - discountAmount
        };
    }
    
    return {
        subtotal: subtotal,
        discount: 0,
        total: subtotal
    };
}

function updateCartUI() {
    const cartItems = document.getElementById('cartItems');
    const totalPrice = document.getElementById('totalPrice');
    const cartCount = document.getElementById('cartCount');
    
    if (!cartItems || !totalPrice || !cartCount) return;
    
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;
    
    cartItems.innerHTML = '';
    
    if (cart.length === 0) {
        cartItems.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-icon">üõí</div>
                <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                <button onclick="showScreen('catalog')" class="btn-checkout" style="margin-top: 20px;">
                    üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
                </button>
            </div>
        `;
        totalPrice.textContent = '0‚ÇΩ';
        saveToStorage();
        return;
    }
    
    const prices = calculateTotalPrice();
    
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h4>${item.name}</h4>
                <div class="item-price-single">${item.price}‚ÇΩ √ó ${item.quantity}</div>
            </div>
            <div class="cart-item-actions">
                <div class="quantity-controls">
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', -1)">-</button>
                    <span class="quantity">${item.quantity}</span>
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', 1)">+</button>
                </div>
                <div class="item-price">${itemTotal}‚ÇΩ</div>
                <button class="btn-remove" onclick="removeFromCart('${item.id}')">
                    üóëÔ∏è
                </button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    });
    
    if (prices.discount > 0) {
        const discountInfo = document.createElement('div');
        discountInfo.className = 'discount-info';
        discountInfo.innerHTML = `
            <div class="discount-line">
                <span>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ${userDiscount}%:</span>
                <span class="discount-amount">-${prices.discount}‚ÇΩ</span>
            </div>
        `;
        cartItems.appendChild(discountInfo);
    }
    
    totalPrice.textContent = `${prices.total}‚ÇΩ`;
    saveToStorage();
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (cart.length === 0) {
        showNotification('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }
    
    const hasShaft = cart.some(item => item.id === 'shaft');
    const hasBowl = cart.some(item => item.id === 'bowl');
    
    if (!hasShaft || !hasBowl) {
        showNotification('‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–ª—å—è–Ω–∞ –Ω—É–∂–Ω—ã –∏ —à–∞—Ö—Ç–∞ –∏ –∫–æ–ª–±–∞!');
        return;
    }
    
    showScreen('checkout');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
function setupEventListeners() {
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
        orderForm.addEventListener('submit', function(e) {
            e.preventDefault();
            processOrderForm(this);
        });
    }
}

function processOrderForm(form) {
    const formData = new FormData(form);
    const orderData = {
        name: formData.get('name').trim(),
        telegram: formData.get('telegram').trim(),
        phone: formData.get('phone').trim(),
        address: formData.get('address').trim(),
        shaftColor: formData.get('shaftColor'),
        comment: formData.get('comment').trim(),
        cart: [...cart],
        timestamp: Date.now()
    };
    
    if (!orderData.name || !orderData.telegram || !orderData.phone || !orderData.address || !orderData.shaftColor) {
        showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    if (!orderData.telegram.startsWith('@')) {
        orderData.telegram = '@' + orderData.telegram;
    }
    
    createOrder(orderData);
}

function createOrder(orderData) {
    const orderId = 'MS' + Date.now().toString().slice(-6);
    const prices = calculateTotalPrice();
    const prepayment = Math.ceil(prices.total * 0.5);
    
    const order = {
        id: orderId,
        ...orderData,
        subtotal: prices.subtotal,
        discount: prices.discount,
        total: prices.total,
        prepayment: prepayment,
        status: 'new',
        date: new Date().toLocaleDateString('ru-RU'),
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        isReferralOrder: isReferralUser,
        userDiscount: userDiscount
    };
    
    orders.push(order);
    currentOrder = order;
    
    saveToStorage();
    showPaymentScreen(orderId, prepayment);
    showNotification('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ.');
    
    // –î–∞–µ–º —Å–ø–∏–Ω—ã –∑–∞ –∑–∞–∫–∞–∑
    orderForSpins();
}

function showPaymentScreen(orderId, amount) {
    const orderIdElement = document.getElementById('orderId');
    const paymentAmountElement = document.getElementById('paymentAmount');
    
    if (orderIdElement) orderIdElement.textContent = orderId;
    if (paymentAmountElement) paymentAmountElement.textContent = `${amount}‚ÇΩ`;
    
    showScreen('payment');
}

// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ü–õ–ê–¢–´
async function confirmPayment() {
    const confirmBtn = document.querySelector('.btn-payment-confirm');
    const originalText = confirmBtn.innerHTML;
    
    confirmBtn.disabled = true;
    confirmBtn.innerHTML = '<span class="btn-icon">‚è≥</span> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º...';
    confirmBtn.style.opacity = '0.7';
    
    try {
        if (currentOrder) {
            const order = orders.find(o => o.id === currentOrder.id);
            if (order) {
                order.status = 'paid';
                saveToStorage();
            }
            
            const sendResult = await sendOrderToAdmin(currentOrder);
            
            showPaymentSuccessAnimation();
            
            cart = [];
            
            if (isReferralUser) {
                isReferralUser = false;
                userDiscount = 0;
                saveToStorage();
            }
            
            updateCartUI();
            
        } else {
            throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
        }
    } catch (error) {
        confirmBtn.disabled = false;
        confirmBtn.innerHTML = originalText;
        confirmBtn.style.opacity = '1';
        
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: ' + error.message);
    }
}

// –ê–ù–ò–ú–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–´
function showPaymentSuccessAnimation() {
    const paymentScreen = document.getElementById('payment');
    
    const successOverlay = document.createElement('div');
    successOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(16, 185, 129, 0.95);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        color: white;
        text-align: center;
        padding: 20px;
        animation: fadeIn 0.5s ease;
    `;
    
    successOverlay.innerHTML = `
        <div style="font-size: 80px; margin-bottom: 20px; animation: bounce 1s ease infinite;">üéâ</div>
        <h2 style="font-size: 24px; margin-bottom: 10px; color: white; font-weight: bold;">–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h2>
        <p style="margin-bottom: 20px; font-size: 16px; opacity: 0.9;">–ó–∞–∫–∞–∑ #${currentOrder.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω</p>
        <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid rgba(255,255,255,0.3);">
            <p style="margin: 5px 0;">üìû <strong>–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä</strong> –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
            <p style="margin: 5px 0;">üí¨ <strong>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É</strong></p>
            <p style="margin: 5px 0;">üöö <strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> 1-3 –¥–Ω—è —á–µ—Ä–µ–∑ –°–î–≠–ö</p>
        </div>
        <button onclick="closeSuccessAnimation()" style="
            background: white; 
            color: #10b981; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 10px; 
            font-weight: bold;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.2s ease;
        ">
            üëç –ü–æ–Ω—è—Ç–Ω–æ
        </button>
    `;
    
    const style = document.createElement('style');
    style.textContent = `
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(successOverlay);
    
    const button = successOverlay.querySelector('button');
    button.addEventListener('mouseover', function() {
        this.style.transform = 'scale(1.05)';
    });
    button.addEventListener('mouseout', function() {
        this.style.transform = 'scale(1)';
    });
}

function closeSuccessAnimation() {
    const overlay = document.querySelector('div[style*="rgba(16, 185, 129"]');
    if (overlay) {
        overlay.style.animation = 'fadeIn 0.5s ease reverse';
        setTimeout(() => {
            overlay.remove();
            showScreen('catalog');
            
            document.querySelector('.app-main').classList.add('success-animation');
            setTimeout(() => {
                document.querySelector('.app-main').classList.remove('success-animation');
            }, 1000);
        }, 500);
    }
}

// –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£
async function sendOrderToAdmin(orderData) {
    const message = `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.name}
üì± <b>Telegram:</b> ${orderData.telegram}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone}
üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${orderData.address}
üé® <b>–¶–≤–µ—Ç —à–∞—Ö—Ç—ã:</b> ${orderData.shaftColor}

üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderData.total}‚ÇΩ
üí≥ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> ${orderData.prepayment}‚ÇΩ
üéÅ <b>–°–∫–∏–¥–∫–∞:</b> ${orderData.discount}‚ÇΩ

üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderData.cart.map(item => 
    `‚Ä¢ ${item.name} √ó ${item.quantity} = ${item.price * item.quantity}‚ÇΩ`
).join('\n')}

${orderData.comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</b>\n${orderData.comment}` : ''}

${orderData.isReferralOrder ? `üéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑</b> (—Å–∫–∏–¥–∫–∞ ${orderData.userDiscount}%)` : ''}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${orderData.date} ${orderData.time}

üí¨ <b>–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã!</b>
    `.trim();

    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_CONFIG.token}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: BOT_CONFIG.adminChatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        console.log('Order sent to admin:', result);
        
        return true;
        
    } catch (error) {
        console.error('Error sending order to admin:', error);
        return true;
    }
}

// –°–í–Ø–ó–¨ –° –ú–ï–ù–ï–î–ñ–ï–†–û–ú
function openManagerChat() {
    const defaultMessage = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –∏–∑ MiniShisha`;
    const telegramUrl = `https://t.me/${BOT_CONFIG.managerUsername.replace('@', '')}?text=${encodeURIComponent(defaultMessage)}`;
    
    window.open(telegramUrl, '_blank');
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
function loadOrdersUI() {
    const ordersList = document.getElementById('ordersList');
    if (!ordersList) return;
    
    ordersList.innerHTML = '';
    
    const userOrders = orders;

    if (userOrders.length === 0) {
        ordersList.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-icon">üìã</div>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                <button onclick="showScreen('catalog')" class="btn-checkout" style="margin-top: 20px;">
                    üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                </button>
            </div>
        `;
        return;
    }
    
    userOrders.sort((a, b) => b.timestamp - a.timestamp);
    
    userOrders.forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = 'order-card';
        
        const discountInfo = order.discount > 0 ? `
            <div class="order-detail">
                <strong>üéÅ –°–∫–∏–¥–∫–∞:</strong>
                <span class="discount-amount">-${order.discount}‚ÇΩ</span>
            </div>
        ` : '';
        
        orderCard.innerHTML = `
            <div class="order-header">
                <div class="order-title">
                    –ó–∞–∫–∞–∑ #${order.id}
                    ${order.isReferralOrder ? '<span class="referral-badge">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞</span>' : ''}
                </div>
                <div class="order-status status-${order.status}">${getStatusText(order.status)}</div>
            </div>
            <div class="order-details">
                <div class="order-detail">
                    <strong>üìÖ –î–∞—Ç–∞:</strong>
                    <span>${order.date} ${order.time}</span>
                </div>
                <div class="order-detail">
                    <strong>üé® –¶–≤–µ—Ç —à–∞—Ö—Ç—ã:</strong>
                    <span>${order.shaftColor}</span>
                </div>
                ${order.subtotal > order.total ? `
                <div class="order-detail">
                    <strong>üí∞ –ò—Ç–æ–≥–æ –±–µ–∑ —Å–∫–∏–¥–∫–∏:</strong>
                    <span style="text-decoration: line-through; color: var(--text-muted);">${order.subtotal}‚ÇΩ</span>
                </div>
                ` : ''}
                ${discountInfo}
                <div class="order-detail">
                    <strong>üí≥ –ö –æ–ø–ª–∞—Ç–µ:</strong>
                    <span>${order.total}‚ÇΩ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${order.prepayment}‚ÇΩ)</span>
                </div>
                <div class="order-detail">
                    <strong>üì¶ –ê–¥—Ä–µ—Å:</strong>
                    <span>${order.address}</span>
                </div>
                <div class="order-detail">
                    <strong>üì± –ö–æ–Ω—Ç–∞–∫—Ç:</strong>
                    <span>${order.telegram}</span>
                </div>
                ${order.comment ? `
                <div class="order-detail">
                    <strong>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong>
                    <span>${order.comment}</span>
                </div>
                ` : ''}
            </div>
            <div class="order-items">
                <strong>üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</strong>
                ${order.cart.map(item => `
                    <div class="order-item">
                        <span>${item.name}</span>
                        <span>${item.quantity}—à—Ç. √ó ${item.price}‚ÇΩ = ${item.price * item.quantity}‚ÇΩ</span>
                    </div>
                `).join('')}
            </div>
        `;
        ordersList.appendChild(orderCard);
    });
}

function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': 'üí≥ –û–ø–ª–∞—á–µ–Ω',
        'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç',
        'completed': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
}

// –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
function loadReferralUI() {
    const referralLinkElement = document.getElementById('referralLink');
    const referralCountElement = document.getElementById('referralCount');
    const discountPercentElement = document.getElementById('discountPercent');
    
    if (!referralLinkElement || !referralCountElement || !discountPercentElement) return;
    
    const userId = generateUserId();
    const referralLink = `${window.location.origin}${window.location.pathname}?ref=${userId}`;
    
    referralLinkElement.value = referralLink;
    
    const userReferrals = referrals.filter(ref => ref.referrerId === userId);
    referralCountElement.textContent = userReferrals.length;
    
    const discount = Math.min(10 + userReferrals.length * 5, 30);
    discountPercentElement.textContent = `${discount}%`;
}

function generateUserId() {
    let userId = localStorage.getItem('minishisha_userId');
    if (!userId) {
        userId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('minishisha_userId', userId);
    }
    return userId;
}

function copyReferralLink() {
    const linkInput = document.getElementById('referralLink');
    if (!linkInput) return;
    
    linkInput.select();
    linkInput.setSelectionRange(0, 99999);
    
    navigator.clipboard.writeText(linkInput.value).then(() => {
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –î–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!');
    }).catch(() => {
        linkInput.select();
        document.execCommand('copy');
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    });
}

function handleReferralParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('ref');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', refParam);
    
    if (refParam) {
        const currentUserId = generateUserId();
        
        if (refParam === currentUserId) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ');
            return;
        }
        
        const existingReferral = referrals.find(ref => 
            ref.referredId === currentUserId
        );
        
        if (!existingReferral) {
            console.log('üéØ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
            
            const referral = {
                id: Date.now(),
                referrerId: refParam,
                referredId: currentUserId,
                date: new Date().toISOString(),
                bonusApplied: false
            };
            
            referrals.push(referral);
            
            isReferralUser = true;
            userDiscount = 10;
            
            saveToStorage();
            
            showNotification('üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!');
        } else {
            console.log('‚ö†Ô∏è –ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ');
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showNotification(message, duration = 3000) {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.showAlert(message);
    } else {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--surface);
            color: var(--text-primary);
            padding: 16px 20px;
            border-radius: 12px;
            border: 1px solid var(--border);
            box-shadow: var(--shadow-lg);
            z-index: 1000;
            font-weight: 500;
            max-width: 320px;
            text-align: center;
            line-height: 1.4;
            animation: slideDown 0.3s ease;
        `;
        toast.innerHTML = message.replace(/\n/g, '<br>');
        document.body.appendChild(toast);
        
        if (!document.querySelector('#toast-styles')) {
            const style = document.createElement('style');
            style.id = 'toast-styles';
            style.textContent = `
                @keyframes slideDown {
                    from { transform: translate(-50%, -100%); opacity: 0; }
                    to { transform: translate(-50%, 0); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }
        
        setTimeout(() => {
            toast.style.animation = 'slideDown 0.3s ease reverse';
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, duration);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    initApp();
});

// –î–µ–±–∞–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
function debugApp() {
    console.log('Cart:', cart);
    console.log('Orders:', orders);
    console.log('Referrals:', referrals);
    console.log('Current Order:', currentOrder);
    console.log('User Discount:', userDiscount);
    console.log('Is Referral User:', isReferralUser);
    console.log('User Spins:', userSpins);
    console.log('User Invitations:', userInvitations);
}
