// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let cart = [];
let currentOrder = null;
let orders = [];
let referrals = [];

// –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
// –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ - –¢–û–õ–¨–ö–û –ö–û–õ–ë–ê –ò –®–ê–•–¢–ê
const products = [
    {
        id: 'shaft',
        name: 'üî© –®–∞—Ö—Ç–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞',
        price: 2000,
        description: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —à–∞—Ö—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∑–∞—â–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π. –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å.',
        image: 'üî©',
        colors: ['‚ö´Ô∏è –ß–µ—Ä–Ω—ã–π', 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π', '‚ö™Ô∏è –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π'],
        specs: {
            material: '–ù–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å',
            height: '65 —Å–º',
            diameter: '6.5 —Å–º',
            weight: '850 –≥'
        }
    },
    {
        id: 'bowl',
        name: 'üîÆ –ö–æ–ª–±–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞', 
        price: 1000,
        description: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–æ–ª–±–∞ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.',
        image: 'üîÆ',
        colors: ['üîµ –°–∏–Ω—è—è', 'üü¢ –ó–µ–ª–µ–Ω–∞—è', 'üî¥ –ö—Ä–∞—Å–Ω–∞—è', '‚ö´Ô∏è –ß–µ—Ä–Ω–∞—è'],
        specs: {
            material: '–ó–∞–∫–∞–ª–µ–Ω–Ω–æ–µ —Å—Ç–µ–∫–ª–æ',
            volume: '800 –º–ª',
            height: '22 —Å–º'
        }
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    loadFromStorage();
    setupEventListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (isAgeConfirmed()) {
        showMainApp();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    handleReferralParams();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    loadProducts();
    updateCartUI();
}

// –†–∞–±–æ—Ç–∞ —Å localStorage
function saveToStorage() {
    localStorage.setItem('minishisha_cart', JSON.stringify(cart));
    localStorage.setItem('minishisha_orders', JSON.stringify(orders));
    localStorage.setItem('minishisha_referrals', JSON.stringify(referrals));
}

function loadFromStorage() {
    try {
        cart = JSON.parse(localStorage.getItem('minishisha_cart') || '[]');
        orders = JSON.parse(localStorage.getItem('minishisha_orders') || '[]');
        referrals = JSON.parse(localStorage.getItem('minishisha_referrals') || '[]');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        cart = [];
        orders = [];
        referrals = [];
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function isAgeConfirmed() {
    return localStorage.getItem('minishisha_ageConfirmed') === 'true';
}

function confirmAge() {
    localStorage.setItem('minishisha_ageConfirmed', 'true');
    showMainApp();
    showNotification('‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MiniShisha!');
}

function rejectAge() {
    showNotification('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç');
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        setTimeout(() => Telegram.WebApp.close(), 2000);
    }
}

function showMainApp() {
    document.getElementById('ageWarning').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen-content').forEach(screen => {
        screen.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById(screenId).classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    switch(screenId) {
        case 'cart':
            updateCartUI();
            break;
        case 'orders':
            loadOrdersUI();
            break;
        case 'referral':
            loadReferralUI();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function loadProducts() {
    const productsList = document.getElementById('productsList');
    productsList.innerHTML = '';

    products.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        productCard.innerHTML = `
            <div class="product-header">
                <span class="product-icon">${product.image}</span>
                <h3>${product.name}</h3>
            </div>
            <p>${product.description}</p>
            ${product.colors ? `<p><small>üé® ${product.colors.join(', ')}</small></p>` : ''}
            ${product.flavors ? `<p><small>üçÉ –í–∫—É—Å—ã: ${product.flavors.join(', ')}</small></p>` : ''}
            <div class="product-footer">
                <div class="product-price">${product.price}‚ÇΩ</div>
                <button class="btn-secondary" onclick="addToCart('${product.id}')">
                    ‚ûï –í –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `;
        productsList.appendChild(productCard);
    });
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (!product) return;

    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            ...product,
            quantity: 1,
            addedAt: new Date().toISOString()
        });
    }
    
    updateCartUI();
    showNotification(`‚úÖ "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
    showScreen('cart');
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartUI();
    showNotification('üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

function updateCartQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCartUI();
        }
    }
}

function updateCartUI() {
    const cartItems = document.getElementById('cartItems');
    const totalPrice = document.getElementById('totalPrice');
    const cartCount = document.getElementById('cartCount');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    cartItems.innerHTML = '';
    
    if (cart.length === 0) {
        cartItems.innerHTML = `
            <div class="empty-cart">
                <div style="font-size: 48px; margin-bottom: 15px;">üõí</div>
                <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                <button onclick="showScreen('catalog')" class="btn-primary" style="margin-top: 15px;">
                    üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
                </button>
            </div>
        `;
        totalPrice.textContent = '0‚ÇΩ';
        saveToStorage();
        return;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    let total = 0;
    
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h4>${item.name}</h4>
                <div class="cart-item-actions">
                    <div class="quantity-controls">
                        <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', -1)">-</button>
                        <span class="quantity">${item.quantity} —à—Ç.</span>
                        <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', 1)">+</button>
                    </div>
                    <div class="item-price">${itemTotal}‚ÇΩ</div>
                    <button class="btn-secondary" onclick="removeFromCart('${item.id}')" 
                            style="background: var(--danger-color);">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
        cartItems.appendChild(cartItem);
    });
    
    totalPrice.textContent = `${total}‚ÇΩ`;
    saveToStorage();
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (cart.length === 0) {
        showNotification('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }
    
    showScreen('checkout');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
function setupEventListeners() {
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
        orderForm.addEventListener('submit', function(e) {
            e.preventDefault();
            processOrderForm(this);
        });
    }
}

function processOrderForm(form) {
    const formData = new FormData(form);
    const orderData = {
        name: formData.get('name').trim(),
        telegram: formData.get('telegram').trim(),
        phone: formData.get('phone').trim(),
        address: formData.get('address').trim(),
        comment: formData.get('comment').trim(),
        cart: [...cart],
        total: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),
        timestamp: Date.now()
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!orderData.name || !orderData.telegram || !orderData.phone || !orderData.address) {
        showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    if (!orderData.telegram.startsWith('@')) {
        orderData.telegram = '@' + orderData.telegram;
    }
    
    createOrder(orderData);
}

function createOrder(orderData) {
    const orderId = 'MS' + Date.now().toString().slice(-6);
    const prepayment = Math.ceil(orderData.total * 0.5); // 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
    
    const order = {
        id: orderId,
        ...orderData,
        prepayment: prepayment,
        status: 'new',
        date: new Date().toLocaleDateString('ru-RU'),
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    };
    
    orders.push(order);
    currentOrder = order;
    
    saveToStorage();
    showPaymentScreen(orderId, prepayment);
    showNotification('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ.');
}

function showPaymentScreen(orderId, amount) {
    document.getElementById('orderId').textContent = orderId;
    document.getElementById('paymentAmount').textContent = `${amount}‚ÇΩ`;
    showScreen('payment');
}

function confirmPayment() {
    if (currentOrder) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        const order = orders.find(o => o.id === currentOrder.id);
        if (order) {
            order.status = 'paid';
            saveToStorage();
        }
        
        showNotification(`‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ #${currentOrder.id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = [];
        updateCartUI();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        showScreen('catalog');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
function loadOrdersUI() {
    const ordersList = document.getElementById('ordersList');
    ordersList.innerHTML = '';
    
    const userOrders = orders.filter(order => 
        order.telegram && currentOrder && order.telegram === currentOrder.telegram
    );
    
    if (userOrders.length === 0) {
        ordersList.innerHTML = `
            <div class="empty-cart">
                <div style="font-size: 48px; margin-bottom: 15px;">üìã</div>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                <button onclick="showScreen('catalog')" class="btn-primary" style="margin-top: 15px;">
                    üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                </button>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ first)
    userOrders.sort((a, b) => b.timestamp - a.timestamp);
    
    userOrders.forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = `order-card ${order.status}`;
        orderCard.innerHTML = `
            <h4>
                –ó–∞–∫–∞–∑ #${order.id}
                <span class="order-status status-${order.status}">${getStatusText(order.status)}</span>
            </h4>
            <p><strong>üìÖ –î–∞—Ç–∞:</strong> ${order.date} –≤ ${order.time}</p>
            <p><strong>üí∞ –°—É–º–º–∞:</strong> ${order.total}‚ÇΩ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${order.prepayment}‚ÇΩ)</p>
            <p><strong>üì¶ –ê–¥—Ä–µ—Å:</strong> ${order.address}</p>
            <p><strong>üì± –ö–æ–Ω—Ç–∞–∫—Ç:</strong> ${order.telegram}</p>
            ${order.comment ? `<p><strong>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${order.comment}</p>` : ''}
            <div class="order-items">
                <strong>üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</strong>
                ${order.cart.map(item => `
                    <div style="margin: 5px 0; padding-left: 10px;">
                        ${item.name} - ${item.quantity}—à—Ç. √ó ${item.price}‚ÇΩ = ${item.price * item.quantity}‚ÇΩ
                    </div>
                `).join('')}
            </div>
        `;
        ordersList.appendChild(orderCard);
    });
}

function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'paid': 'üí≥ –û–ø–ª–∞—á–µ–Ω',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
function loadReferralUI() {
    const userId = generateUserId();
    const referralLink = `${window.location.origin}${window.location.pathname}?ref=${userId}`;
    
    document.getElementById('referralLink').value = referralLink;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const userReferrals = referrals.filter(ref => ref.referrerId === userId);
    document.getElementById('referralCount').textContent = userReferrals.length;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    const discount = Math.min(10 + userReferrals.length * 5, 30);
    document.getElementById('discountPercent').textContent = `${discount}%`;
}

function generateUserId() {
    let userId = localStorage.getItem('minishisha_userId');
    if (!userId) {
        userId = 'user_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('minishisha_userId', userId);
    }
    return userId;
}

function copyReferralLink() {
    const linkInput = document.getElementById('referralLink');
    linkInput.select();
    linkInput.setSelectionRange(0, 99999);
    
    navigator.clipboard.writeText(linkInput.value).then(() => {
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –î–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!');
    }).catch(() => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        linkInput.select();
        document.execCommand('copy');
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
    });
}

function handleReferralParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('ref');
    
    if (refParam) {
        const currentUserId = generateUserId();
        
        if (refParam !== currentUserId) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const referral = {
                id: Date.now(),
                referrerId: refParam,
                referredId: currentUserId,
                date: new Date().toISOString(),
                bonusApplied: false
            };
            
            referrals.push(referral);
            saveToStorage();
            
            showNotification('üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!');
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showNotification(message) {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initApp();

});
