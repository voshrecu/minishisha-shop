// –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let cart = [];
let currentOrder = null;
let orders = [];
let referrals = [];
let userDiscount = 0;
let isReferralUser = false;
let userId = '';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_CONFIG = {
    token: '8490335749:AAEKfRAaNKbnGNuEIN2M4rNVGb_BwH07nXk',
    adminChatId: '922569313',
    managerUsername: '@minishishaaa'
};

// –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞
const products = [
    {
        id: 'shaft',
        name: '–®–∞—Ö—Ç–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞',
        price: 2000,
        description: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —à–∞—Ö—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∑–∞—â–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π. –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å.',
        image: 'images/black.jpg',
        fallbackIcon: 'üî©',
        colors: ['‚ö´Ô∏è –ß–µ—Ä–Ω—ã–π', 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', 'üü¢ –ó–µ–ª–µ–Ω—ã–π', 'üîµ –°–∏–Ω–∏–π', '‚ö™Ô∏è –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π'],
        specs: {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª': 'ABS –ø–ª–∞—Å—Ç–∏–∫, –ú–µ—Ç–∞–ª–ª',
            '–í—ã—Å–æ—Ç–∞': '24 —Å–º',
            '–î–∏–∞–º–µ—Ç—Ä': '6.7 —Å–º',
            '–í–µ—Å': '300 –≥'
        }
    },
    {
        id: 'bowl',
        name: '–ö–æ–ª–±–∞ –¥–ª—è –∫–∞–ª—å—è–Ω–∞', 
        price: 1000,
        description: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –∫–æ–ª–±–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∑—å–±–∞ –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.',
        image: 'images/kolb.jpg',
        fallbackIcon: 'üîÆ',
        specs: {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª': 'ABS –ø–ª–∞—Å—Ç–∏–∫',
            '–í—ã—Å–æ—Ç–∞': '7.5 —Å–º'
        }
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    loadFromStorage();
    setupEventListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand();
        Telegram.WebApp.setHeaderColor('#2c5530');
        Telegram.WebApp.setBackgroundColor('#0f172a');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (isAgeConfirmed()) {
        showMainApp();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    handleReferralParams();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    loadProducts();
    updateCartUI();
    loadReferralUI();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (orders.length > 0) {
        currentOrder = orders[orders.length - 1];
    }
}

// –†–∞–±–æ—Ç–∞ —Å localStorage
function saveToStorage() {
    localStorage.setItem('minishisha_cart', JSON.stringify(cart));
    localStorage.setItem('minishisha_orders', JSON.stringify(orders));
    localStorage.setItem('minishisha_referrals', JSON.stringify(referrals));
    localStorage.setItem('minishisha_userDiscount', userDiscount.toString());
    localStorage.setItem('minishisha_isReferralUser', isReferralUser.toString());
    localStorage.setItem('minishisha_userId', userId);
}

function loadFromStorage() {
    try {
        cart = JSON.parse(localStorage.getItem('minishisha_cart') || '[]');
        orders = JSON.parse(localStorage.getItem('minishisha_orders') || '[]');
        referrals = JSON.parse(localStorage.getItem('minishisha_referrals') || '[]');
        userDiscount = parseInt(localStorage.getItem('minishisha_userDiscount') || '0');
        isReferralUser = localStorage.getItem('minishisha_isReferralUser') === 'true';
        userId = localStorage.getItem('minishisha_userId') || generateUserId();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        cart = [];
        orders = [];
        referrals = [];
        userDiscount = 0;
        isReferralUser = false;
        userId = generateUserId();
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function generateUserId() {
    return 'user_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now().toString(36);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
function isAgeConfirmed() {
    return localStorage.getItem('minishisha_ageConfirmed') === 'true';
}

function confirmAge() {
    localStorage.setItem('minishisha_ageConfirmed', 'true');
    showMainApp();
    showNotification('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MiniShisha!', 'success');
}

function rejectAge() {
    showNotification('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ª–∏—Ü –º–ª–∞–¥—à–µ 18 –ª–µ—Ç', 'error');
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        setTimeout(() => Telegram.WebApp.close(), 2000);
    }
}

function showMainApp() {
    document.getElementById('ageWarning').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function showScreen(screenId) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButton = document.querySelector(`.nav-item[data-screen="${screenId}"]`);
    if (navButton) {
        navButton.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    switch(screenId) {
        case 'cart':
            updateCartUI();
            break;
        case 'orders':
            loadOrdersUI();
            break;
        case 'referral':
            loadReferralUI();
            break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function loadProducts() {
    const productsList = document.getElementById('productsList');
    if (!productsList) return;
    
    productsList.innerHTML = '';

    products.forEach((product, index) => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';
        
        // –ë–µ–π–¥–∂ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        const badge = index === 0 ? '<div class="product-badge">üî• –•–∏—Ç –ø—Ä–æ–¥–∞–∂</div>' : '';
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const specsHTML = product.specs ? `
            <div class="product-specs">
                <div class="specs-grid">
                    ${Object.entries(product.specs).map(([key, value]) => `
                        <div class="spec-item">
                            <span>${key}:</span>
                            <span class="spec-value">${value}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : '';
        
        // –¶–≤–µ—Ç–∞
        const colorsHTML = product.colors ? `
            <div class="product-colors">
                ${product.colors.map(color => `
                    <span class="color-tag">${color}</span>
                `).join('')}
            </div>
        ` : '';

        productCard.innerHTML = `
            ${badge}
            <div class="product-header">
                <img src="${product.image}" alt="${product.name}" class="product-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='block'">
                <span class="product-icon" style="display: none;">${product.fallbackIcon}</span>
                <h3>${product.name}</h3>
            </div>
            <p class="product-description">${product.description}</p>
            ${specsHTML}
            ${colorsHTML}
            <div class="product-footer">
                <div class="product-price">${product.price}‚ÇΩ</div>
                <button class="btn-add-to-cart" onclick="addToCart('${product.id}')">
                    <span class="btn-icon">‚ûï</span>
                    –í –∫–æ—Ä–∑–∏–Ω—É
                </button>
            </div>
        `;
        productsList.appendChild(productCard);
    });
}

// –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (!product) return;

    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            ...product,
            quantity: 1,
            addedAt: new Date().toISOString()
        });
    }
    
    updateCartUI();
    showNotification(`‚úÖ "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`, 'success');
}

function removeFromCart(productId) {
    cart = cart.filter(item => item.id !== productId);
    updateCartUI();
}

function updateCartQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(productId);
        } else {
            updateCartUI();
        }
    }
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
function calculateTotalPrice() {
    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    if (isReferralUser && userDiscount > 0) {
        const discountAmount = Math.round((subtotal * userDiscount) / 100);
        return {
            subtotal: subtotal,
            discount: discountAmount,
            total: subtotal - discountAmount
        };
    }
    
    return {
        subtotal: subtotal,
        discount: 0,
        total: subtotal
    };
}

function updateCartUI() {
    const cartItems = document.getElementById('cartItems');
    const totalPrice = document.getElementById('totalPrice');
    const cartCount = document.getElementById('cartCount');
    
    if (!cartItems || !totalPrice || !cartCount) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = totalItems;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    cartItems.innerHTML = '';
    
    if (cart.length === 0) {
        cartItems.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-icon">üõí</div>
                <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                <button onclick="showScreen('catalog')" class="btn-checkout" style="margin-top: 20px;">
                    üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
                </button>
            </div>
        `;
        totalPrice.textContent = '0‚ÇΩ';
        saveToStorage();
        return;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const prices = calculateTotalPrice();
    
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-info">
                <h4>${item.name}</h4>
                <div class="item-price-single">${item.price}‚ÇΩ √ó ${item.quantity}</div>
            </div>
            <div class="cart-item-actions">
                <div class="quantity-controls">
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', -1)">-</button>
                    <span class="quantity">${item.quantity}</span>
                    <button class="quantity-btn" onclick="updateCartQuantity('${item.id}', 1)">+</button>
                </div>
                <div class="item-price">${itemTotal}‚ÇΩ</div>
                <button class="btn-remove" onclick="removeFromCart('${item.id}')">
                    üóëÔ∏è
                </button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∏–¥–∫–µ
    if (prices.discount > 0) {
        const discountInfo = document.createElement('div');
        discountInfo.className = 'discount-info';
        discountInfo.innerHTML = `
            <div class="discount-line">
                <span>üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ ${userDiscount}%:</span>
                <span class="discount-amount">-${prices.discount}‚ÇΩ</span>
            </div>
        `;
        cartItems.appendChild(discountInfo);
    }
    
    totalPrice.textContent = `${prices.total}‚ÇΩ`;
    saveToStorage();
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    if (cart.length === 0) {
        showNotification('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —à–∞—Ö—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const hasShaft = cart.some(item => item.id === 'shaft');
    const shaftColorGroup = document.getElementById('shaftColorGroup');
    
    if (hasShaft) {
        shaftColorGroup.style.display = 'block';
        // –î–µ–ª–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∞—Ö—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        document.querySelectorAll('input[name="shaftColor"]').forEach(input => {
            input.required = true;
        });
    } else {
        shaftColorGroup.style.display = 'none';
        document.querySelectorAll('input[name="shaftColor"]').forEach(input => {
            input.required = false;
        });
    }
    
    showScreen('checkout');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
function setupEventListeners() {
    const orderForm = document.getElementById('orderForm');
    if (orderForm) {
        orderForm.addEventListener('submit', function(e) {
            e.preventDefault();
            processOrderForm(this);
        });
    }
}

function processOrderForm(form) {
    const formData = new FormData(form);
    const orderData = {
        name: formData.get('name').trim(),
        telegram: formData.get('telegram').trim(),
        phone: formData.get('phone').trim(),
        address: formData.get('address').trim(),
        shaftColor: formData.get('shaftColor') || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        comment: formData.get('comment').trim(),
        cart: [...cart],
        timestamp: Date.now(),
        referrerId: getReferrerIdFromStorage()
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!orderData.name || !orderData.telegram || !orderData.phone || !orderData.address) {
        showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!', 'error');
        return;
    }
    
    if (!orderData.telegram.startsWith('@')) {
        orderData.telegram = '@' + orderData.telegram;
    }
    
    createOrder(orderData);
}

function createOrder(orderData) {
    const orderId = 'MS' + Date.now().toString().slice(-6);
    const prices = calculateTotalPrice();
    const prepayment = Math.ceil(prices.total * 0.5);
    
    const order = {
        id: orderId,
        ...orderData,
        subtotal: prices.subtotal,
        discount: prices.discount,
        total: prices.total,
        prepayment: prepayment,
        status: 'new',
        date: new Date().toLocaleDateString('ru-RU'),
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        isReferralOrder: isReferralUser,
        userDiscount: userDiscount,
        userId: userId
    };
    
    orders.push(order);
    currentOrder = order;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if (orderData.referrerId && orderData.referrerId !== userId) {
        applyReferrerBonus(orderData.referrerId);
    }
    
    saveToStorage();
    showPaymentScreen(orderId, prepayment);
    showNotification('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ.', 'success');
}

function showPaymentScreen(orderId, amount) {
    const orderIdElement = document.getElementById('orderId');
    const paymentAmountElement = document.getElementById('paymentAmount');
    const prepaymentAmountElement = document.getElementById('prepaymentAmount');
    
    if (orderIdElement) orderIdElement.textContent = orderId;
    if (paymentAmountElement) paymentAmountElement.textContent = `${amount}‚ÇΩ`;
    if (prepaymentAmountElement) prepaymentAmountElement.textContent = `${amount}‚ÇΩ`;
    
    showScreen('payment');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
function updateOrderStatus(orderId, status) {
    const order = orders.find(o => o.id === orderId);
    if (order) {
        order.status = status;
        order.updatedAt = new Date().toISOString();
        saveToStorage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–∫–∞–∑–æ–≤
        if (document.getElementById('orders').classList.contains('active')) {
            loadOrdersUI();
        }
        
        return true;
    }
    return false;
}

// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê –ú–ï–ù–ï–î–ñ–ï–†–£
async function sendReceiptToManager() {
    if (!currentOrder) {
        showNotification('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞', 'error');
        return;
    }
    
    const sendBtn = document.querySelector('.btn-payment-confirm');
    const originalText = sendBtn.innerHTML;
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    sendBtn.disabled = true;
    sendBtn.innerHTML = '<span class="btn-icon">‚è≥</span> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
    sendBtn.style.opacity = '0.7';
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const sendResult = await sendOrderToAdmin(currentOrder);
        
        if (sendResult) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–∞–∫—Ç–∏–≤–Ω—ã–π"
            updateOrderStatus(currentOrder.id, 'active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            showSuccessMessage();
            
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            cart = [];
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if (isReferralUser) {
                isReferralUser = false;
                userDiscount = 0;
                saveToStorage();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateCartUI();
            
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
        }
    } catch (error) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        sendBtn.disabled = false;
        sendBtn.innerHTML = originalText;
        sendBtn.style.opacity = '1';
        
        showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: ' + error.message, 'error');
    }
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
function showSuccessMessage() {
    const paymentScreen = document.getElementById('payment');
    
    if (paymentScreen) {
        paymentScreen.innerHTML = `
            <div style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 80px; margin-bottom: 20px;">‚úÖ</div>
                <h2 style="margin-bottom: 15px; color: var(--text-primary);">–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!</h2>
                <p style="color: var(--text-secondary); margin-bottom: 25px; font-size: 16px;">
                    –ó–∞–∫–∞–∑ #${currentOrder.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.
                </p>
                
                <div style="background: rgba(16, 185, 129, 0.1); border: 1px solid rgba(16, 185, 129, 0.3); border-radius: 12px; padding: 20px; margin: 25px 0;">
                    <h3 style="color: var(--success); margin-bottom: 15px;">üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
                    <div style="text-align: left;">
                        <p style="margin: 10px 0;">üí¨ <strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</strong> –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram</p>
                        <p style="margin: 10px 0;">üïí <strong>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏</strong> –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
                        <p style="margin: 10px 0;">üöö <strong>–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç 1-3 –¥–Ω—è</strong> —á–µ—Ä–µ–∑ –°–î–≠–ö</p>
                        <p style="margin: 10px 0;">üì± <strong>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π</p>
                    </div>
                </div>

                <div style="display: flex; flex-direction: column; gap: 12px; margin-top: 30px;">
                    <button onclick="openManagerChat(true)" class="btn-checkout" style="background: var(--success);">
                        <span class="btn-icon">üì§</span>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
                    </button>
                    
                    <button onclick="showScreen('orders')" class="btn-checkout" style="background: var(--primary-light);">
                        <span class="btn-icon">üìã</span>
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
                    </button>
                    
                    <button onclick="showScreen('catalog')" class="btn-checkout" style="background: var(--surface-light); color: var(--text-primary);">
                        <span class="btn-icon">üõçÔ∏è</span>
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                    </button>
                </div>
                
                <div style="margin-top: 25px; padding: 15px; background: rgba(59, 130, 246, 0.1); border-radius: 10px; border: 1px solid rgba(59, 130, 246, 0.3);">
                    <p style="margin: 0; color: var(--text-secondary); font-size: 14px;">
                        üí° <strong>–í–∞–∂–Ω–æ:</strong> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    </p>
                </div>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
function openManagerChat(withPayment = false) {
    let message;
    
    if (withPayment && currentOrder) {
        message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ –∑–∞–∫–∞–∑—É #${currentOrder.id}. –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –°—É–º–º–∞: ${currentOrder.prepayment}‚ÇΩ`;
    } else if (currentOrder) {
        message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É #${currentOrder.id}`;
    } else {
        message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –∏–∑ MiniShisha`;
    }
    
    const telegramUrl = `https://t.me/${BOT_CONFIG.managerUsername.replace('@', '')}?text=${encodeURIComponent(message)}`;
    window.open(telegramUrl, '_blank');
}

// –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£
async function sendOrderToAdmin(orderData) {
    const referrerInfo = orderData.referrerId ? `\nüéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${orderData.referrerId}` : '';
    
    const message = `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.name}
üì± <b>Telegram:</b> ${orderData.telegram}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone}
üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${orderData.address}
üé® <b>–¶–≤–µ—Ç —à–∞—Ö—Ç—ã:</b> ${orderData.shaftColor}

üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderData.total}‚ÇΩ
üí≥ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> ${orderData.prepayment}‚ÇΩ
üéÅ <b>–°–∫–∏–¥–∫–∞:</b> ${orderData.discount}‚ÇΩ

üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderData.cart.map(item => 
    `‚Ä¢ ${item.name} √ó ${item.quantity} = ${item.price * item.quantity}‚ÇΩ`
).join('\n')}

${orderData.comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:</b>\n${orderData.comment}` : ''}

${orderData.isReferralOrder ? `üéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑</b> (—Å–∫–∏–¥–∫–∞ ${orderData.userDiscount}%)` : ''}
${referrerInfo}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${orderData.date} ${orderData.time}
üë§ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${orderData.userId}

üí¨ <b>–ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>
    `.trim();

    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_CONFIG.token}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: BOT_CONFIG.adminChatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        console.log('Order sent to admin:', result);
        
        return true;
        
    } catch (error) {
        console.error('Error sending order to admin:', error);
        return false;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
function loadOrdersUI() {
    const ordersList = document.getElementById('ordersList');
    if (!ordersList) return;
    
    ordersList.innerHTML = '';
    
    const userOrders = orders;

    if (userOrders.length === 0) {
        ordersList.innerHTML = `
            <div class="empty-cart">
                <div class="empty-cart-icon">üìã</div>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                <button onclick="showScreen('catalog')" class="btn-checkout" style="margin-top: 20px;">
                    üõçÔ∏è –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                </button>
            </div>
        `;
        return;
    }
    
    userOrders.sort((a, b) => b.timestamp - a.timestamp);
    
    userOrders.forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = 'order-card';
        
        const discountInfo = order.discount > 0 ? `
            <div class="order-detail">
                <strong>üéÅ –°–∫–∏–¥–∫–∞:</strong>
                <span class="discount-amount">-${order.discount}‚ÇΩ</span>
            </div>
        ` : '';
        
        orderCard.innerHTML = `
            <div class="order-header">
                <div class="order-title">
                    –ó–∞–∫–∞–∑ #${order.id}
                    ${order.isReferralOrder ? '<span class="referral-badge">–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞</span>' : ''}
                </div>
                <div class="order-status status-${order.status}">${getStatusText(order.status)}</div>
            </div>
            <div class="order-details">
                <div class="order-detail">
                    <strong>üìÖ –î–∞—Ç–∞:</strong>
                    <span>${order.date} ${order.time}</span>
                </div>
                <div class="order-detail">
                    <strong>üé® –¶–≤–µ—Ç —à–∞—Ö—Ç—ã:</strong>
                    <span>${order.shaftColor}</span>
                </div>
                ${order.subtotal > order.total ? `
                <div class="order-detail">
                    <strong>üí∞ –ò—Ç–æ–≥–æ –±–µ–∑ —Å–∫–∏–¥–∫–∏:</strong>
                    <span style="text-decoration: line-through; color: var(--text-muted);">${order.subtotal}‚ÇΩ</span>
                </div>
                ` : ''}
                ${discountInfo}
                <div class="order-detail">
                    <strong>üí≥ –ö –æ–ø–ª–∞—Ç–µ:</strong>
                    <span>${order.total}‚ÇΩ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${order.prepayment}‚ÇΩ)</span>
                </div>
                <div class="order-detail">
                    <strong>üì¶ –ê–¥—Ä–µ—Å:</strong>
                    <span>${order.address}</span>
                </div>
                <div class="order-detail">
                    <strong>üì± –ö–æ–Ω—Ç–∞–∫—Ç:</strong>
                    <span>${order.telegram}</span>
                </div>
                ${order.comment ? `
                <div class="order-detail">
                    <strong>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong>
                    <span>${order.comment}</span>
                </div>
                ` : ''}
            </div>
            <div class="order-items">
                <strong>üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</strong>
                ${order.cart.map(item => `
                    <div class="order-item">
                        <span>${item.name}</span>
                        <span>${item.quantity}—à—Ç. √ó ${item.price}‚ÇΩ = ${item.price * item.quantity}‚ÇΩ</span>
                    </div>
                `).join('')}
            </div>
        `;
        ordersList.appendChild(orderCard);
    });
}

function getStatusText(status) {
    const statusMap = {
        'new': 'üÜï –ù–æ–≤—ã–π',
        'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π',
        'completed': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
function loadReferralUI() {
    const referralLinkElement = document.getElementById('referralLink');
    const referralCountElement = document.getElementById('referralCount');
    const discountPercentElement = document.getElementById('discountPercent');
    
    if (!referralLinkElement || !referralCountElement || !discountPercentElement) return;
    
    const referralLink = `${window.location.origin}${window.location.pathname}?ref=${userId}`;
    referralLinkElement.value = referralLink;
    
    const userReferrals = getSuccessfulReferrals();
    referralCountElement.textContent = userReferrals.length;
    
    const discount = calculateUserDiscount();
    discountPercentElement.textContent = `${discount}%`;
    
    userDiscount = discount;
    saveToStorage();
}

function getSuccessfulReferrals() {
    return referrals.filter(ref => 
        ref.referrerId === userId && ref.bonusApplied === true
    );
}

function calculateUserDiscount() {
    const successfulReferrals = getSuccessfulReferrals();
    return Math.min(10 + successfulReferrals.length * 5, 30);
}

function copyReferralLink() {
    const linkInput = document.getElementById('referralLink');
    if (!linkInput) return;
    
    linkInput.select();
    linkInput.setSelectionRange(0, 99999);
    
    navigator.clipboard.writeText(linkInput.value).then(() => {
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –î–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!', 'success');
    }).catch(() => {
        linkInput.select();
        document.execCommand('copy');
        showNotification('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    });
}

function handleReferralParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const refParam = urlParams.get('ref');
    
    if (refParam && refParam !== userId) {
        saveReferrerId(refParam);
        
        const existingReferral = referrals.find(ref => 
            ref.referredId === userId && ref.referrerId === refParam
        );
        
        if (!existingReferral) {
            const referral = {
                id: Date.now(),
                referrerId: refParam,
                referredId: userId,
                date: new Date().toISOString(),
                bonusApplied: false
            };
            
            referrals.push(referral);
            isReferralUser = true;
            userDiscount = 10;
            
            saveToStorage();
            showNotification('üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!', 'success');
        }
    }
}

function saveReferrerId(referrerId) {
    localStorage.setItem('minishisha_referrerId', referrerId);
}

function getReferrerIdFromStorage() {
    return localStorage.getItem('minishisha_referrerId');
}

function applyReferrerBonus(referrerId) {
    const referral = referrals.find(ref => 
        ref.referrerId === referrerId && ref.referredId === userId && !ref.bonusApplied
    );
    
    if (referral) {
        referral.bonusApplied = true;
        referral.bonusAppliedAt = new Date().toISOString();
        saveToStorage();
        
        if (userId === referrerId) {
            showNotification('üéâ –í–∞—à –¥—Ä—É–≥ —Å–æ–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!', 'success');
            loadReferralUI();
        }
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const container = document.getElementById('notificationContainer');
    if (!container) return;
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: 'üí°'
    };
    
    notification.innerHTML = `
        <span class="notification-icon">${icons[type] || icons.info}</span>
        <span class="notification-content">${message}</span>
    `;
    
    container.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'fadeOut 0.3s ease forwards';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    initApp();
});
